//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: input_forces.cpp
//
// MATLAB Coder version            : 4.0
// C/C++ source code generated on  : 20-Nov-2018 22:55:49
//

// Include Files
#include "rt_nonfinite.h"
#include "input_forces.h"

// Function Definitions

//
// function Q = input_forces(q1,q2,q3,q4,rk,rw)
// INPUT_FORCES
//     Q = INPUT_FORCES(Q1,Q2,Q3,Q4,RK,RW)
// Arguments    : float q1
//                float q2
//                float q3
//                float q4
//                float rk
//                float rw
//                float Q[18]
// Return Type  : void
//
__attribute__((optimize("O3"))) void input_forces(float q1, float q2, float q3, float q4, float rk, float rw,
                  float Q[18])
{
  float t3;
  float t4;
  float t5;
  float t7;
  float t8;
  float t9;
  float t10;
  float t11;
  float t12;
  float t13;
  float t14;
  float t15;
  float t16;
  float t17;
  float t18;
  float t19;
  float t20;
  float t21;
  float t22;
  float t23;
  float t24;
  float t25;
  float t26;
  float t27;
  float t28;
  float t29;
  float t30;
  float t31;
  float t32;
  float x[18];
  int i8;
  int i9;
  int i10;
  int i11;

  //     This function was generated by the Symbolic Math Toolbox version 8.1.
  //     12-Nov-2018 22:44:45
  // 'input_forces:8' t2 = sqrt(2.0);
  // 'input_forces:9' t3 = 1.0./rw;
  t3 = 1.0F / rw;

  // 'input_forces:10' t4 = q1.*q4.*2.0;
  t4 = q1 * q4 * 2.0F;

  // 'input_forces:11' t5 = q2.*q3.*2.0;
  t5 = q2 * q3 * 2.0F;

  // 'input_forces:12' t6 = sqrt(3.0);
  // 'input_forces:13' t7 = q3.*q4.*4.0;
  t7 = q3 * q4 * 4.0F;

  // 'input_forces:14' t8 = q1.^2;
  t8 = q1 * q1;

  // 'input_forces:15' t9 = q2.^2;
  t9 = q2 * q2;

  // 'input_forces:16' t10 = t6.*t9;
  t10 = 1.73205078F * t9;

  // 'input_forces:17' t11 = q3.^2;
  t11 = q3 * q3;

  // 'input_forces:18' t12 = q4.^2;
  t12 = q4 * q4;

  // 'input_forces:19' t13 = t6.*t12;
  t13 = 1.73205078F * t12;

  // 'input_forces:20' t14 = q1.*q3.*4.0;
  t14 = q1 * q3 * 4.0F;

  // 'input_forces:21' t15 = q2.*q4.*4.0;
  t15 = q2 * q4 * 4.0F;

  // 'input_forces:22' t16 = q1.*q4.*t6.*2.0;
  t16 = q1 * q4 * 1.73205078F * 2.0F;

  // 'input_forces:23' t17 = q3.*2.0;
  t17 = q3 * 2.0F;

  // 'input_forces:24' t18 = q4.*t6;
  t18 = q4 * 1.73205078F;

  // 'input_forces:25' t19 = q4.*2.0;
  t19 = q4 * 2.0F;

  // 'input_forces:26' t20 = q2.*2.0;
  t20 = q2 * 2.0F;

  // 'input_forces:27' t21 = q1.*t6;
  t21 = q1 * 1.73205078F;

  // 'input_forces:28' t22 = q2.*t6;
  t22 = q2 * 1.73205078F;

  // 'input_forces:29' t23 = q1-q3;
  t23 = q1 - q3;

  // 'input_forces:30' t24 = q2-q4;
  t24 = q2 - q4;

  // 'input_forces:31' t25 = q1+q3;
  t25 = q1 + q3;

  // 'input_forces:32' t26 = q2+q4;
  t26 = q2 + q4;

  // 'input_forces:33' t27 = q1.*2.0;
  t27 = q1 * 2.0F;

  // 'input_forces:34' t28 = q1+t17+t18;
  t28 = (q1 + t17) + t18;

  // 'input_forces:35' t29 = q3.*t6;
  t29 = q3 * 1.73205078F;

  // 'input_forces:36' t30 = -q4+t20+t21;
  t30 = (-q4 + t20) + t21;

  // 'input_forces:37' t31 = q4-t20+t21;
  t31 = (q4 - t20) + t21;

  // 'input_forces:38' t32 = q2+t19+t29;
  t32 = (q2 + t19) + t29;

  // 'input_forces:39' t33 = q1+t17-t18;
  t17 = (q1 + t17) - t18;

  // 'input_forces:40' t34 = -q3+t22+t27;
  t18 = (-q3 + t22) + t27;

  // 'input_forces:41' t35 = q3+t22-t27;
  t21 = (q3 + t22) - t27;

  // 'input_forces:42' t36 = q2+t19-t29;
  t20 = (q2 + t19) - t29;

  // 'input_forces:43' Q = reshape([-t3.*(t2.*(t4+t5).*(1.0./2.0)+t2.*(q1.*q2.*2.0-q3.*q4.*2.0).*(1.0./2.0)),-t3.*(t2.*(q1.*q3.*2.0+q2.*q4.*2.0).*(1.0./2.0)-t2.*(t8+t9-t11-t12).*(1.0./2.0)),q1.*rk.*t2.*t3.*t23+q2.*rk.*t2.*t3.*t24+q3.*rk.*t2.*t3.*t25+q4.*rk.*t2.*t3.*t26,q1.*rk.*t2.*t3.*t26-q2.*rk.*t2.*t3.*t25+q3.*rk.*t2.*t3.*t24-q4.*rk.*t2.*t3.*t23,-q1.*rk.*t2.*t3.*t25+q3.*rk.*t2.*t3.*t23-q2.*rk.*t2.*t3.*t26+q4.*rk.*t2.*t3.*t24,0.0,t2.*t3.*(t4+t5+t7+t10+t13-q1.*q2.*4.0-t6.*t8-t6.*t11).*(1.0./4.0),t2.*t3.*(t8+t9-t11-t12+t14+t15+t16-q2.*q3.*t6.*2.0).*(-1.0./4.0),q3.*rk.*t2.*t3.*(q1.*-2.0+q3+t22).*(-1.0./2.0)-q1.*rk.*t2.*t3.*t28.*(1.0./2.0)+q4.*rk.*t2.*t3.*t30.*(1.0./2.0)-q2.*rk.*t2.*t3.*(q2+t19-q3.*t6).*(1.0./2.0),q1.*rk.*t2.*t3.*t30.*(1.0./2.0)+q4.*rk.*t2.*t3.*t28.*(1.0./2.0)+q2.*rk.*t2.*t3.*t35.*(1.0./2.0)-q3.*rk.*t2.*t3.*t36.*(1.0./2.0),q3.*rk.*t2.*t3.*t28.*(-1.0./2.0)-q2.*rk.*t2.*t3.*t30.*(1.0./2.0)+q1.*rk.*t2.*t3.*t35.*(1.0./2.0)-q4.*rk.*t2.*t3.*t36.*(1.0./2.0),0.0,t2.*t3.*(t4+t5+t7-t10-t13-q1.*q2.*4.0+t6.*t8+t6.*t11).*(1.0./4.0),t2.*t3.*(t8+t9-t11-t12+t14+t15-t16+q2.*q3.*t6.*2.0).*(-1.0./4.0),q1.*rk.*t2.*t3.*t33.*(-1.0./2.0)-q2.*rk.*t2.*t3.*t32.*(1.0./2.0)-q4.*rk.*t2.*t3.*t31.*(1.0./2.0)+q3.*rk.*t2.*t3.*t34.*(1.0./2.0),q1.*rk.*t2.*t3.*t31.*(-1.0./2.0)-q3.*rk.*t2.*t3.*t32.*(1.0./2.0)-q2.*rk.*t2.*t3.*t34.*(1.0./2.0)+q4.*rk.*t2.*t3.*t33.*(1.0./2.0),q2.*rk.*t2.*t3.*t31.*(1.0./2.0)-q1.*rk.*t2.*t3.*t34.*(1.0./2.0)-q3.*rk.*t2.*t3.*t33.*(1.0./2.0)-q4.*rk.*t2.*t3.*t32.*(1.0./2.0),0.0],[6,3]); 
  x[0] = -t3 * (1.41421354F * (t4 + t5) * 0.5F + 1.41421354F * (q1 * q2 * 2.0F -
    q3 * q4 * 2.0F) * 0.5F);
  x[1] = -t3 * (1.41421354F * (q1 * q3 * 2.0F + q2 * q4 * 2.0F) * 0.5F -
                1.41421354F * (((t8 + t9) - t11) - t12) * 0.5F);
  x[2] = ((q1 * rk * 1.41421354F * t3 * t23 + q2 * rk * 1.41421354F * t3 * t24)
          + q3 * rk * 1.41421354F * t3 * t25) + q4 * rk * 1.41421354F * t3 * t26;
  x[3] = ((q1 * rk * 1.41421354F * t3 * t26 - q2 * rk * 1.41421354F * t3 * t25)
          + q3 * rk * 1.41421354F * t3 * t24) - q4 * rk * 1.41421354F * t3 * t23;
  x[4] = ((-q1 * rk * 1.41421354F * t3 * t25 + q3 * rk * 1.41421354F * t3 * t23)
          - q2 * rk * 1.41421354F * t3 * t26) + q4 * rk * 1.41421354F * t3 * t24;
  x[5] = 0.0F;
  x[6] = 1.41421354F * t3 * (((((((t4 + t5) + t7) + t10) + t13) - q1 * q2 * 4.0F)
    - 1.73205078F * t8) - 1.73205078F * t11) * 0.25F;
  x[7] = 1.41421354F * t3 * (((((((t8 + t9) - t11) - t12) + t14) + t15) + t16) -
    q2 * q3 * 1.73205078F * 2.0F) * -0.25F;
  x[8] = ((q3 * rk * 1.41421354F * t3 * ((q1 * -2.0F + q3) + t22) * -0.5F - q1 *
           rk * 1.41421354F * t3 * t28 * 0.5F) + q4 * rk * 1.41421354F * t3 *
          t30 * 0.5F) - q2 * rk * 1.41421354F * t3 * ((q2 + t19) - q3 *
    1.73205078F) * 0.5F;
  x[9] = ((q1 * rk * 1.41421354F * t3 * t30 * 0.5F + q4 * rk * 1.41421354F * t3 *
           t28 * 0.5F) + q2 * rk * 1.41421354F * t3 * t21 * 0.5F) - q3 * rk *
    1.41421354F * t3 * t20 * 0.5F;
  x[10] = ((q3 * rk * 1.41421354F * t3 * t28 * -0.5F - q2 * rk * 1.41421354F *
            t3 * t30 * 0.5F) + q1 * rk * 1.41421354F * t3 * t21 * 0.5F) - q4 *
    rk * 1.41421354F * t3 * t20 * 0.5F;
  x[11] = 0.0F;
  x[12] = 1.41421354F * t3 * (((((((t4 + t5) + t7) - t10) - t13) - q1 * q2 *
    4.0F) + 1.73205078F * t8) + 1.73205078F * t11) * 0.25F;
  x[13] = 1.41421354F * t3 * (((((((t8 + t9) - t11) - t12) + t14) + t15) - t16)
    + q2 * q3 * 1.73205078F * 2.0F) * -0.25F;
  x[14] = ((q1 * rk * 1.41421354F * t3 * t17 * -0.5F - q2 * rk * 1.41421354F *
            t3 * t32 * 0.5F) - q4 * rk * 1.41421354F * t3 * t31 * 0.5F) + q3 *
    rk * 1.41421354F * t3 * t18 * 0.5F;
  x[15] = ((q1 * rk * 1.41421354F * t3 * t31 * -0.5F - q3 * rk * 1.41421354F *
            t3 * t32 * 0.5F) - q2 * rk * 1.41421354F * t3 * t18 * 0.5F) + q4 *
    rk * 1.41421354F * t3 * t17 * 0.5F;
  x[16] = ((q2 * rk * 1.41421354F * t3 * t31 * 0.5F - q1 * rk * 1.41421354F * t3
            * t18 * 0.5F) - q3 * rk * 1.41421354F * t3 * t17 * 0.5F) - q4 * rk *
    1.41421354F * t3 * t32 * 0.5F;
  x[17] = 0.0F;
  i8 = 0;
  i9 = 0;
  i10 = 0;
  for (i11 = 0; i11 < 18; i11++) {
    Q[i9 + 3 * i8] = x[i10];
    i8++;
    if (i8 > 5) {
      i8 = 0;
      i9++;
    }

    i10++;
  }
}

//
// File trailer for input_forces.cpp
//
// [EOF]
//
