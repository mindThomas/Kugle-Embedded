//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: OffsetEstimator_dEncoders2L_dq.cpp
//
// MATLAB Coder version            : 4.0
// C/C++ source code generated on  : 19-Nov-2018 11:57:59
//

// Include Files
#include "rt_nonfinite.h"
#include "VelocityEstimator.h"
#include "OffsetEstimator_dEncoders2L_dq.h"

// Function Definitions

//
// function Hencoder = OffsetEstimator_dEncoders2L_dq(dq1,dq2,dq3,dq4,dt,dx_2L,dy_2L,l,n_gear,n_ticksRev,q1,q2,q3,q4,rk,rw)
// OFFSETESTIMATOR_DENCODERS2L_DQ
//     HENCODER = OFFSETESTIMATOR_DENCODERS2L_DQ(DQ1,DQ2,DQ3,DQ4,DT,DX_2L,DY_2L,L,N_GEAR,N_TICKSREV,Q1,Q2,Q3,Q4,RK,RW)
// Arguments    : float dq1
//                float dq2
//                float dq3
//                float dq4
//                float dt
//                float dx_2L
//                float dy_2L
//                float l
//                float n_gear
//                float n_ticksRev
//                float q1
//                float q2
//                float q3
//                float q4
//                float rk
//                float rw
//                float Hencoder[12]
// Return Type  : void
//
__attribute__((optimize("O3"))) void OffsetEstimator_dEncoders2L_dq(float dq1, float dq2, float dq3, float dq4,
  float dt, float dx_2L, float dy_2L, float l, float n_gear, float n_ticksRev,
  float q1, float q2, float q3, float q4, float rk, float rw, float Hencoder[12])
{
  float t2;
  float t4;
  float t11;
  float t16;
  float t21;
  float t23;
  float t38;
  float t39;
  float t26;
  float t27;
  float t28;
  float t29;
  float t32;
  float t34;
  float t35;
  float t36;
  float t37;
  float t40;
  float t41;
  float t43;
  float t44;
  float t45;
  float t46;
  float t47;
  float t48;
  float t50;
  float t51;
  float t52;
  float t53;
  float t54;
  float t66;
  float t56;
  float t58;
  float t61;
  float t65;
  float t67;
  float x[12];
  int i8;
  int i9;
  int i10;
  int i11;

  //     This function was generated by the Symbolic Math Toolbox version 8.1.
  //     15-Nov-2018 11:36:19
  // 'OffsetEstimator_dEncoders2L_dq:8' t2 = 1.0./rk;
  t2 = 1.0F / rk;

  // 'OffsetEstimator_dEncoders2L_dq:9' t3 = sqrt(2.0);
  // 'OffsetEstimator_dEncoders2L_dq:10' t4 = 1.0./rw;
  t4 = 1.0F / rw;

  // 'OffsetEstimator_dEncoders2L_dq:11' t5 = 1.0./pi;
  // 'OffsetEstimator_dEncoders2L_dq:12' t6 = dq1.*q3.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:13' t7 = dq3.*q1.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:14' t8 = dq2.*q4.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:15' t9 = dq4.*q2.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:16' t10 = t6+t7+t8+t9;
  // 'OffsetEstimator_dEncoders2L_dq:17' t17 = l.*t10.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:18' t11 = dx_2L-t17;
  t11 = dx_2L - l * (((dq1 * q3 * 2.0F + dq3 * q1 * 2.0F) + dq2 * q4 * 2.0F) +
                     dq4 * q2 * 2.0F) * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:19' t12 = dq1.*q2.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:20' t13 = dq2.*q1.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:21' t18 = dq3.*q4.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:22' t19 = dq4.*q3.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:23' t14 = t12+t13-t18-t19;
  // 'OffsetEstimator_dEncoders2L_dq:24' t15 = l.*t14.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:25' t16 = dy_2L+t15;
  t16 = dy_2L + l * (((dq1 * q2 * 2.0F + dq2 * q1 * 2.0F) - dq3 * q4 * 2.0F) -
                     dq4 * q3 * 2.0F) * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:26' t20 = q1.^2;
  // 'OffsetEstimator_dEncoders2L_dq:27' t21 = t2.*t20;
  t21 = t2 * (q1 * q1);

  // 'OffsetEstimator_dEncoders2L_dq:28' t22 = q2.^2;
  // 'OffsetEstimator_dEncoders2L_dq:29' t23 = t2.*t22;
  t23 = t2 * (q2 * q2);

  // 'OffsetEstimator_dEncoders2L_dq:30' t24 = q3.^2;
  // 'OffsetEstimator_dEncoders2L_dq:31' t25 = q4.^2;
  // 'OffsetEstimator_dEncoders2L_dq:32' t38 = t2.*t24;
  t38 = t2 * (q3 * q3);

  // 'OffsetEstimator_dEncoders2L_dq:33' t39 = t2.*t25;
  t39 = t2 * (q4 * q4);

  // 'OffsetEstimator_dEncoders2L_dq:34' t26 = t21+t23-t38-t39;
  t26 = ((t21 + t23) - t38) - t39;

  // 'OffsetEstimator_dEncoders2L_dq:35' t27 = q1.*q4.*t2.*2.0;
  t27 = q1 * q4 * t2 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:36' t28 = q2.*q3.*t2.*2.0;
  t28 = q2 * q3 * t2 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:37' t29 = t27+t28;
  t29 = t27 + t28;

  // 'OffsetEstimator_dEncoders2L_dq:38' t30 = q1.*q3.*t2.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:39' t31 = q2.*q4.*t2.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:40' t32 = t30+t31;
  t32 = q1 * q3 * t2 * 2.0F + q2 * q4 * t2 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:41' t33 = q1.*q2.*t2.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:42' t42 = q3.*q4.*t2.*2.0;
  // 'OffsetEstimator_dEncoders2L_dq:43' t34 = t33-t42;
  t34 = q1 * q2 * t2 * 2.0F - q3 * q4 * t2 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:44' t35 = dq4.*2.0;
  t35 = dq4 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:45' t36 = q2.*t2.*t11.*2.0;
  t36 = q2 * t2 * t11 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:46' t37 = q3.*t2.*t16.*2.0;
  t37 = q3 * t2 * t16 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:47' t40 = dq2.*2.0;
  t40 = dq2 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:48' t41 = q1.*t2.*t16.*2.0;
  t41 = q1 * t2 * t16 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:49' t43 = q1.*t2.*t11.*2.0;
  t43 = q1 * t2 * t11 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:50' t44 = q4.*t2.*t16.*2.0;
  t44 = q4 * t2 * t16 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:51' t45 = q2.*t2.*t16.*2.0;
  t45 = q2 * t2 * t16 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:52' t46 = q4.*t2.*t11.*2.0;
  t46 = q4 * t2 * t11 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:53' t47 = dq2.*l.*t26.*4.0;
  t47 = dq2 * l * t26 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:54' t48 = dq3.*l.*t29.*4.0;
  t48 = dq3 * l * t29 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:55' t49 = dq2.*l.*t32.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:56' t73 = dq3.*l.*t34.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:57' t50 = t35+t36+t37+t49-t73;
  t50 = (((t35 + t36) + t37) + dq2 * l * t32 * 4.0F) - dq3 * l * t34 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:58' t51 = dq1.*2.0;
  t51 = dq1 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:59' t52 = q3.*t2.*t11.*2.0;
  t52 = q3 * t2 * t11 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:60' t53 = dq1.*l.*t26.*4.0;
  t53 = dq1 * l * t26 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:61' t54 = dq4.*l.*t29.*4.0;
  t54 = dq4 * l * t29 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:62' t55 = dq1.*l.*t32.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:63' t66 = dq3.*2.0;
  t66 = dq3 * 2.0F;

  // 'OffsetEstimator_dEncoders2L_dq:64' t76 = dq4.*l.*t34.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:65' t56 = t43+t44+t55-t66-t76;
  t56 = (((t43 + t44) + dq1 * l * t32 * 4.0F) - t66) - dq4 * l * t34 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:66' t57 = sqrt(3.0);
  // 'OffsetEstimator_dEncoders2L_dq:67' t58 = t21-t23+t38-t39;
  t58 = ((t21 - t23) + t38) - t39;

  // 'OffsetEstimator_dEncoders2L_dq:68' t59 = t27-t28;
  t16 = t27 - t28;

  // 'OffsetEstimator_dEncoders2L_dq:69' t60 = dq4.*l.*t26.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:70' t80 = dq1.*l.*t29.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:71' t61 = t35+t36+t37+t60-t80;
  t61 = (((t35 + t36) + t37) + dq4 * l * t26 * 4.0F) - dq1 * l * t29 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:72' t62 = dq1.*l.*t34.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:73' t63 = dq4.*l.*t32.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:74' t64 = -t40-t41+t46+t62+t63;
  // 'OffsetEstimator_dEncoders2L_dq:75' t65 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t64.*(1.0./4.0); 
  t65 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    ((((-t40 - t41) + t46) + dq1 * l * t34 * 4.0F) + dq4 * l * t32 * 4.0F) *
    0.25F;

  // 'OffsetEstimator_dEncoders2L_dq:76' t67 = dq3.*l.*t26.*4.0;
  t67 = dq3 * l * t26 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:77' t68 = dq2.*l.*t34.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:78' t69 = dq3.*l.*t32.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:79' t70 = -t45+t51+t52+t68+t69;
  // 'OffsetEstimator_dEncoders2L_dq:80' t71 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t70.*(1.0./4.0); 
  t27 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    ((((-t45 + t51) + t52) + dq2 * l * t34 * 4.0F) + dq3 * l * t32 * 4.0F) *
    0.25F;

  // 'OffsetEstimator_dEncoders2L_dq:81' t72 = t40+t41-t46+t47+t48;
  t28 = (((t40 + t41) - t46) + t47) + t48;

  // 'OffsetEstimator_dEncoders2L_dq:82' t74 = dq2.*l.*t59.*4.0;
  t26 = dq2 * l * t16 * 4.0F;

  // 'OffsetEstimator_dEncoders2L_dq:83' t75 = t45-t51-t52+t53+t54;
  t32 = (((t45 - t51) - t52) + t53) + t54;

  // 'OffsetEstimator_dEncoders2L_dq:84' t77 = dq4.*l.*t58.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:85' t78 = t35+t36+t37+t77-dq1.*l.*t59.*4.0; 
  // 'OffsetEstimator_dEncoders2L_dq:86' t79 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t57.*t78.*(1.0./8.0); 
  t38 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    1.73205078F * ((((t35 + t36) + t37) + dq4 * l * t58 * 4.0F) - dq1 * l * t16 *
                   4.0F) * 0.125F;

  // 'OffsetEstimator_dEncoders2L_dq:87' t81 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t61.*(1.0./8.0); 
  t39 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F * t61 *
    0.125F;

  // 'OffsetEstimator_dEncoders2L_dq:88' t82 = dq1.*l.*t58.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:89' t83 = dq4.*l.*t59.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:90' t84 = t45-t51-t52+t82+t83;
  // 'OffsetEstimator_dEncoders2L_dq:91' t85 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t57.*t84.*(1.0./8.0); 
  t21 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    1.73205078F * ((((t45 - t51) - t52) + dq1 * l * t58 * 4.0F) + dq4 * l * t16 *
                   4.0F) * 0.125F;

  // 'OffsetEstimator_dEncoders2L_dq:92' t86 = t43+t44-t66+t67-dq2.*l.*t29.*4.0; 
  // 'OffsetEstimator_dEncoders2L_dq:93' t87 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t86.*(1.0./8.0); 
  t23 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    ((((t43 + t44) - t66) + t67) - dq2 * l * t29 * 4.0F) * 0.125F;

  // 'OffsetEstimator_dEncoders2L_dq:94' t88 = dq2.*l.*t58.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:95' t89 = dq3.*l.*t59.*4.0;
  // 'OffsetEstimator_dEncoders2L_dq:96' t90 = -t40-t41+t46+t88+t89;
  // 'OffsetEstimator_dEncoders2L_dq:97' t91 = dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t57.*t90.*(1.0./8.0); 
  t16 = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    1.73205078F * ((((-t40 - t41) + t46) + dq2 * l * t58 * 4.0F) + dq3 * l * t16
                   * 4.0F) * 0.125F;

  // 'OffsetEstimator_dEncoders2L_dq:98' Hencoder = reshape([dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*(t40+t41+t47+t48-q4.*t2.*t11.*2.0).*(1.0./4.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t50.*(1.0./4.0),dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t50.*(-1.0./4.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t72.*(1.0./8.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t57.*(dq3.*-2.0+t43+t44+t74-dq3.*l.*t58.*4.0).*(1.0./8.0),dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t50.*(-1.0./4.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t72.*(1.0./8.0)+dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t57.*(t43+t44-t66+t74-dq3.*l.*t58.*4.0).*(1.0./8.0),dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*(dq1.*-2.0+t45+t53+t54-q3.*t2.*t11.*2.0).*(1.0./4.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t56.*(1.0./4.0),t79-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t56.*(1.0./4.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t75.*(1.0./8.0),-t79-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t56.*(1.0./4.0)-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t75.*(1.0./8.0),t65-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*t61.*(1.0./4.0),t65+t81+t85,t65+t81-t85,t71-dt.*n_gear.*n_ticksRev.*rk.*t3.*t4.*t5.*(dq3.*-2.0+t43+t44+t67-dq2.*l.*t29.*4.0).*(1.0./4.0),t71+t87+t91,t71+t87-t91],[3,4]); 
  x[0] = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    ((((t40 + t41) + t47) + t48) - q4 * t2 * t11 * 2.0F) * 0.25F - dt * n_gear *
    n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F * t50 * 0.25F;
  x[1] = (dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F * t50 *
          -0.25F - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 *
          0.318309873F * t28 * 0.125F) - dt * n_gear * n_ticksRev * rk *
    1.41421354F * t4 * 0.318309873F * 1.73205078F * ((((dq3 * -2.0F + t43) + t44)
    + t26) - dq3 * l * t58 * 4.0F) * 0.125F;
  x[2] = (dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F * t50 *
          -0.25F - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 *
          0.318309873F * t28 * 0.125F) + dt * n_gear * n_ticksRev * rk *
    1.41421354F * t4 * 0.318309873F * 1.73205078F * ((((t43 + t44) - t66) + t26)
    - dq3 * l * t58 * 4.0F) * 0.125F;
  x[3] = dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    ((((dq1 * -2.0F + t45) + t53) + t54) - q3 * t2 * t11 * 2.0F) * 0.25F - dt *
    n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F * t56 * 0.25F;
  x[4] = (t38 - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
          t56 * 0.25F) - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 *
    0.318309873F * t32 * 0.125F;
  x[5] = (-t38 - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F
          * t56 * 0.25F) - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 *
    0.318309873F * t32 * 0.125F;
  x[6] = t65 - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    t61 * 0.25F;
  x[7] = (t65 + t39) + t21;
  x[8] = (t65 + t39) - t21;
  x[9] = t27 - dt * n_gear * n_ticksRev * rk * 1.41421354F * t4 * 0.318309873F *
    ((((dq3 * -2.0F + t43) + t44) + t67) - dq2 * l * t29 * 4.0F) * 0.25F;
  x[10] = (t27 + t23) + t16;
  x[11] = (t27 + t23) - t16;
  i8 = 0;
  i9 = 0;
  i10 = 0;
  for (i11 = 0; i11 < 12; i11++) {
    Hencoder[i9 + (i8 << 2)] = x[i10];
    i8++;
    if (i8 > 2) {
      i8 = 0;
      i9++;
    }

    i10++;
  }
}

//
// File trailer for OffsetEstimator_dEncoders2L_dq.cpp
//
// [EOF]
//
