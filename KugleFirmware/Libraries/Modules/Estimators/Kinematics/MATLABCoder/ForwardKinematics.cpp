//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ForwardKinematics.cpp
//
// MATLAB Coder version            : 4.0
// C/C++ source code generated on  : 18-Oct-2018 19:29:27
//

// Include Files
#include "ForwardKinematics.h"

// Function Definitions

//
// function xy_velocity = ForwardKinematics(dpsi,q,dq,rk,rw)
// Arguments    : const float dpsi[3]
//                const float q[4]
//                const float dq[4]
//                float rk
//                float rw
//                float xy_velocity[2]
// Return Type  : void
//
void _ForwardKinematics(const float dpsi[3], const float q[4], const float
  dq[4], float rk, float rw, float xy_velocity[2])
{
  float t3;
  float t4;
  float t5;
  float t6;
  float t7;
  float t8;
  float t10;
  float t11;
  float t12;
  float t13;

  // 'ForwardKinematics:3' xy_velocity = ForwardKinematics(dpsi(1),dpsi(2),dpsi(3),dq(1),dq(2),dq(3),dq(4),q(1),q(2),q(3),q(4),rk,rw); 
  // FORWARDKINEMATICS
  //     DXDY = FORWARDKINEMATICS(DPSI1,DPSI2,DPSI3,DQ1,DQ2,DQ3,DQ4,Q1,Q2,Q3,Q4,RK,RW) 
  //     This function was generated by the Symbolic Math Toolbox version 8.1.
  //     17-Oct-2018 09:53:34
  // 'ForwardKinematics:8' t2 = sqrt(2.0);
  // 'ForwardKinematics:9' t3 = 1.0./rk;
  t3 = 1.0F / rk;

  // 'ForwardKinematics:10' t4 = dpsi1.*-2.0+dpsi2+dpsi3;
  t4 = (dpsi[0] * -2.0F + dpsi[1]) + dpsi[2];

  // 'ForwardKinematics:11' t5 = q1.^2;
  t5 = q[0] * q[0];

  // 'ForwardKinematics:12' t6 = q2.^2;
  t6 = q[1] * q[1];

  // 'ForwardKinematics:13' t7 = q3.^2;
  t7 = q[2] * q[2];

  // 'ForwardKinematics:14' t8 = q4.^2;
  t8 = q[3] * q[3];

  // 'ForwardKinematics:15' t9 = sqrt(6.0);
  // 'ForwardKinematics:16' t10 = dpsi2-dpsi3;
  t10 = dpsi[1] - dpsi[2];

  // 'ForwardKinematics:17' t11 = q1.*q4.*2.0;
  t11 = q[0] * q[3] * 2.0F;

  // 'ForwardKinematics:18' t12 = q2.*q3.*2.0;
  t12 = q[1] * q[2] * 2.0F;

  // 'ForwardKinematics:19' t13 = dpsi1+dpsi2+dpsi3;
  t13 = (dpsi[0] + dpsi[1]) + dpsi[2];

  // 'ForwardKinematics:20' dxdy = [-rk.*(dq1.*q3.*2.0-dq3.*q1.*2.0-dq2.*q4.*2.0+dq4.*q2.*2.0+rw.*t2.*t3.*t13.*(q1.*q2.*2.0-q3.*q4.*2.0).*(1.0./3.0)+rw.*t3.*t9.*t10.*(t5-t6+t7-t8).*(1.0./3.0)-rw.*t2.*t3.*t4.*(t11+t12).*(1.0./3.0));-rk.*(dq1.*q2.*-2.0+dq2.*q1.*2.0-dq3.*q4.*2.0+dq4.*q3.*2.0+rw.*t2.*t3.*t13.*(q1.*q3.*2.0+q2.*q4.*2.0).*(1.0./3.0)+rw.*t2.*t3.*t4.*(t5+t6-t7-t8).*(1.0./3.0)+rw.*t3.*t9.*t10.*(t11-t12).*(1.0./3.0))]; 
  xy_velocity[0] = -rk * ((((((dq[0] * q[2] * 2.0F - dq[2] * q[0] * 2.0F) - dq[1]
    * q[3] * 2.0F) + dq[3] * q[1] * 2.0F) + rw * 1.41421354F * t3 * t13 * (q[0] *
    q[1] * 2.0F - q[2] * q[3] * 2.0F) * 0.333333343F) + rw * t3 * 2.44948983F *
    t10 * (((t5 - t6) + t7) - t8) * 0.333333343F) - rw * 1.41421354F * t3 * t4 *
    (t11 + t12) * 0.333333343F);
  xy_velocity[1] = -rk * ((((((dq[0] * q[1] * -2.0F + dq[1] * q[0] * 2.0F) - dq
    [2] * q[3] * 2.0F) + dq[3] * q[2] * 2.0F) + rw * 1.41421354F * t3 * t13 *
    (q[0] * q[2] * 2.0F + q[1] * q[3] * 2.0F) * 0.333333343F) + rw * 1.41421354F
    * t3 * t4 * (((t5 + t6) - t7) - t8) * 0.333333343F) + rw * t3 * 2.44948983F *
    t10 * (t11 - t12) * 0.333333343F);
}

//
// File trailer for ForwardKinematics.cpp
//
// [EOF]
//
